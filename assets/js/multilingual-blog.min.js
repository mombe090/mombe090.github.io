(function() { 'use strict'; const STORAGE_KEY = 'preferred_language'; const DEFAULT_LANGUAGE = 'fr'; const SUPPORTED_LANGUAGES = ['fr', 'en']; const LanguageManager = { getPreferredLanguage() { if (typeof(Storage) !== "undefined") { return localStorage.getItem(STORAGE_KEY); } return null; }, setPreferredLanguage(language) { if (typeof(Storage) !== "undefined" && SUPPORTED_LANGUAGES.includes(language)) { localStorage.setItem(STORAGE_KEY, language); console.log('Language preference saved:', language); } }, detectBrowserLanguage() { if (navigator.language) { const browserLang = navigator.language.split('-')[0].toLowerCase(); return SUPPORTED_LANGUAGES.includes(browserLang) ? browserLang : DEFAULT_LANGUAGE; } return DEFAULT_LANGUAGE; }, getCurrentLanguage() { const bodyLang = document.body.getAttribute('data-lang'); if (bodyLang && SUPPORTED_LANGUAGES.includes(bodyLang)) { return bodyLang; } const metaLang = document.querySelector('meta[http-equiv="content-language"]'); if (metaLang) { const lang = metaLang.getAttribute('content').split('-')[0].toLowerCase(); if (SUPPORTED_LANGUAGES.includes(lang)) { return lang; } } const pathLang = this.extractLanguageFromPath(window.location.pathname); if (pathLang) { return pathLang; } return DEFAULT_LANGUAGE; }, extractLanguageFromPath(path) { const match = path.match(/^\/([a-z]{2})\ if (match && SUPPORTED_LANGUAGES.includes(match[1])) { return match[1]; } return null; } }; const TransitionManager = { showLoadingIndicator() { this.hideLoadingIndicator(); const indicator = document.createElement('div'); indicator.id = 'language-loading'; indicator.innerHTML = ` <div class="loading-spinner"> <i class="fas fa-globe fa-spin"></i> <span>Switching language...</span> </div> `; indicator.style.cssText = ` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.7); display: flex; justify-content: center; align-items: center; z-index: 9999; color: white; font-size: 1.1rem; `; const spinner = indicator.querySelector('.loading-spinner'); spinner.style.cssText = ` display: flex; flex-direction: column; align-items: center; gap: 1rem; `; document.body.appendChild(indicator); }, hideLoadingIndicator() { const indicator = document.getElementById('language-loading'); if (indicator) { indicator.remove(); } }, smoothTransition(callback) { document.body.style.opacity = '0.7'; document.body.style.transition = 'opacity 0.3s ease-out'; setTimeout(() => { if (callback) callback(); }, 150); } }; const LanguageSwitcher = { init() { this.setupEventListeners(); this.highlightCurrentLanguage(); this.checkLanguagePreference(); }, setupEventListeners() { document.addEventListener('click', (e) => { if (e.target.closest('.lang-option')) { e.preventDefault(); const langOption = e.target.closest('.lang-option'); const targetLang = langOption.getAttribute('data-lang'); const targetUrl = langOption.getAttribute('href'); this.switchLanguage(targetLang, targetUrl); } }); document.addEventListener('keydown', (e) => { if (e.altKey && e.key === 'l') { e.preventDefault(); this.toggleLanguage(); } }); }, switchLanguage(targetLang, targetUrl) { if (!SUPPORTED_LANGUAGES.includes(targetLang)) { console.error('Unsupported language:', targetLang); return; } LanguageManager.setPreferredLanguage(targetLang); TransitionManager.showLoadingIndicator(); TransitionManager.smoothTransition(() => { window.location.href = targetUrl; }); this.trackLanguageSwitch(targetLang); }, toggleLanguage() { const currentLang = LanguageManager.getCurrentLanguage(); const otherLang = SUPPORTED_LANGUAGES.find(lang => lang !== currentLang); if (otherLang) { const langOption = document.querySelector(`.lang-option[data-lang="${otherLang}"]`); if (langOption) { const targetUrl = langOption.getAttribute('href'); this.switchLanguage(otherLang, targetUrl); } } }, highlightCurrentLanguage() { const currentLang = LanguageManager.getCurrentLanguage(); const langToggle = document.querySelector('.lang-toggle'); if (langToggle) { langToggle.setAttribute('data-lang', currentLang); const langCode = langToggle.querySelector('.lang-code'); if (langCode) { langCode.textContent = currentLang.toUpperCase(); } } }, checkLanguagePreference() { const preferredLang = LanguageManager.getPreferredLanguage(); const currentLang = LanguageManager.getCurrentLanguage(); if (preferredLang && preferredLang !== currentLang) { this.showLanguageNotification(preferredLang); } }, showLanguageNotification(preferredLang) { const langOption = document.querySelector(`.lang-option[data-lang="${preferredLang}"]`); if (!langOption) return; const notification = document.createElement('div'); notification.className = 'language-notification'; notification.innerHTML = ` <div class="notification-content"> <i class="fas fa-info-circle"></i> <span>This page is also available in ${this.getLanguageName(preferredLang)}</span> <button class="switch-btn" data-lang="${preferredLang}" data-url="${langOption.href}"> Switch </button> <button class="dismiss-btn">&times;</button> </div> `; notification.style.cssText = ` position: fixed; top: 20px; right: 20px; background: var(--primary-color, #007bff); color: white; padding: 1rem; border-radius: 0.5rem; box-shadow: 0 4px 12px rgba(0,0,0,0.15); z-index: 1000; max-width: 300px; animation: slideIn 0.3s ease-out; `; const style = document.createElement('style'); style.textContent = ` @keyframes slideIn { from { transform: translateX(100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } } .notification-content { display: flex; align-items: center; gap: 0.5rem; font-size: 0.9rem; } .switch-btn, .dismiss-btn { background: rgba(255,255,255,0.2); border: none; color: white; padding: 0.25rem 0.5rem; border-radius: 0.25rem; cursor: pointer; margin-left: auto; } .dismiss-btn { margin-left: 0.25rem; font-size: 1.1rem; } .switch-btn:hover, .dismiss-btn:hover { background: rgba(255,255,255,0.3); } `; document.head.appendChild(style); document.body.appendChild(notification); notification.querySelector('.switch-btn').addEventListener('click', () => { const lang = notification.querySelector('.switch-btn').getAttribute('data-lang'); const url = notification.querySelector('.switch-btn').getAttribute('data-url'); this.switchLanguage(lang, url); }); notification.querySelector('.dismiss-btn').addEventListener('click', () => { notification.remove(); }); setTimeout(() => { if (notification.parentNode) { notification.remove(); } }, 5000); }, getLanguageName(lang) { const names = { 'fr': 'French', 'en': 'English' }; return names[lang] || lang.toUpperCase(); }, trackLanguageSwitch(targetLang) { if (typeof gtag !== 'undefined') { gtag('event', 'language_switch', { 'target_language': targetLang, 'source_language': LanguageManager.getCurrentLanguage() }); } if (typeof ga !== 'undefined') { ga('send', 'event', 'Language', 'Switch', targetLang); } console.log('Language switch tracked:', targetLang); } }; const SearchEnhancer = { init() { this.setupSearchFilters(); }, setupSearchFilters() { const searchInput = document.querySelector('.search-input'); if (searchInput) { const currentLang = LanguageManager.getCurrentLanguage(); searchInput.setAttribute('data-lang', currentLang); searchInput.addEventListener('input', this.filterSearchResults.bind(this)); } }, filterSearchResults(event) { const query = event.target.value.toLowerCase(); const currentLang = LanguageManager.getCurrentLanguage(); console.log('Search query:', query, 'Language:', currentLang); } }; const AccessibilityEnhancer = { init() { this.addKeyboardShortcuts(); this.enhanceScreenReaderSupport(); }, addKeyboardShortcuts() { document.addEventListener('keydown', (e) => { if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') { return; } if (e.altKey && e.key === 'l') { e.preventDefault(); LanguageSwitcher.toggleLanguage(); } }); }, enhanceScreenReaderSupport() { const currentLang = LanguageManager.getCurrentLanguage(); document.documentElement.setAttribute('lang', currentLang); const langToggle = document.querySelector('.lang-toggle'); if (langToggle) { langToggle.setAttribute('aria-label', `Current language: ${LanguageSwitcher.getLanguageName(currentLang)}. Press to switch language.`); } } }; document.addEventListener('DOMContentLoaded', function() { console.log('Initializing multilingual blog enhancements...'); LanguageSwitcher.init(); SearchEnhancer.init(); AccessibilityEnhancer.init(); console.log('Multilingual blog enhancements initialized successfully'); }); window.addEventListener('beforeunload', function() { TransitionManager.hideLoadingIndicator(); }); window.MultilingualBlog = { LanguageManager, LanguageSwitcher, TransitionManager, version: '1.0.0' }; })();